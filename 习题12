不合理，我们的项目使用不同的语言实现，会导致项目的代码量差距很大。比如同样的一个项目使用rust、haskell、ocaml编译器的代码量差不过，但是使用c++的编译器的代码量会多30%，而使用python的代码量则会少一半。同样的对于这种方式，还有一个问题是在项目的开发前期，还没有进行代码量的工作，这个方法将会不适用，这对于前期的项目开发会产生负面影响，导致效率低下。在程序员的方面，这种方法没有重视人的能动性，只是用很简单的代码工作量标示生产率，会导致程序员进行水代码的性为，而不会促进程序员去开发更合理的代码结构和算法来使代码更加精简，提高项目的成产率。因此，制定一个能够克服所有这些缺点的生产率指标是非常有帮助的，此外，我们还需要了解些无论如何测量都与之相关的周边问题，比如生产力目标，管理风格和程序员专业知识对生产力的影响等。
